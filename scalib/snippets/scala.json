{
	"scalatemplate":
	{
		"prefix":"templatescala",
		"body":[
			"import java.io.BufferedOutputStream\nimport java.io.EOFException\nimport java.io.InputStream\nimport java.io.PrintStream\nimport java.lang\nimport java.lang.Math.negateExact\nimport java.lang.Math.toIntExact\nimport java.util\nimport scala.annotation.tailrec\nimport scala.collection.mutable\n\nobject Main\n{\n\tdef main(args:Array[String]):Unit=\n\t{\n\t\t//val scanner=new FastScanner(System.in)\n\t\tval allin=io.Source.stdin.getLines().mkString(\"\\n\").split(\" \")\n\t\tsolve(/*args*/)\n\t\tSystem.out.flush()\n\t}\n\tdef solve(/*args*/)=\n\t{\n\t\t$0\n\t}\n\tfinal class FastScanner(in:InputStream)\n\t{\n\t\tprivate val buf=Array.ofDim[Byte](4*1024)\n\t\tprivate var(a,b)=(0,0)\n\t\t@tailrec\n\t\tdef nextByte():Byte=\n\t\t{\n\t\t\tif(a<b)\n\t\t\t{\n\t\t\t\tval b=buf(a)\n\t\t\t\ta+=1\n\t\t\t\tb\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb=in.read(buf)\n\t\t\t\tif(b<0){throw new EOFException()}else{a=0;nextByte()}\n\t\t\t}\n\t\t}\n\t\t@tailrec\n\t\tdef hasNext:Boolean=\n\t\t{\n\t\t\tif(a<b)true\n\t\t\telse if(b<0)true\n\t\t\telse\n\t\t\t{\n\t\t\t\tb=in.read(buf)\n\t\t\t\ta=0\n\t\t\t\thasNext\n\t\t\t}\n\t\t}\n\t\t@tailrec\n\t\tdef nextLong(negate:Boolean=false):Long=\n\t\t{\n\t\t\tvar c=nextChar()\n\t\t\tif(c=='-'){nextLong(negate=true)}\n\t\t\telse if(!c.isDigit){nextLong()}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar res=0L\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tval res2=10*res+(c-'0')\n\t\t\t\t\tif(res2>=res)res=res2 else throw new ArithmeticException(s\"long overflow\")\n\t\t\t\t\tc=if(hasNext)nextChar()else'\\u0000'\n\t\t\t\t}while(c.isDigit)\n\t\t\t\tif(!c.isDigit){a-=1}\n\t\t\t\tif(negate)negateExact(res)else res\n\t\t\t}\n\t\t}\n\t\t@tailrec\n\t\tdef nextLine(sb:java.lang.StringBuilder=new java.lang.StringBuilder):String=\n\t\t{\n\t\t\tif(!hasNext)sb.toString()else\n\t\t\t{\n\t\t\t\tnextChar()match\n\t\t\t\t{\n\t\t\t\t\tcase '\\n'=>\n\t\t\t\t\t\tif(sb.length==0||sb.charAt(sb.length-1)!='\\r')sb.toString()\n\t\t\t\t\t\telse sb.substring(0,sb.length-1)\n\t\t\t\t\tcase c=>nextLine(sb.append(c))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdef nextInt():Int=toIntExact(nextLong())\n\t\tdef nextChar():Char=nextByte().toChar\n\t\tdef nextToken(isDelimiter:Char=>Boolean=_.isWhitespace):String=\n\t\t{\n\t\t\t@tailrec\n\t\t\tdef goToWordStart():Option[Char]=\n\t\t\t{\n\t\t\t\tif(!hasNext)None else\n\t\t\t\t{\n\t\t\t\t\tval c=nextChar()\n\t\t\t\t\tif(!isDelimiter(c))Some(c)else goToWordStart()\n\t\t\t\t}\n\t\t\t}\n\t\t\tgoToWordStart().map\n\t\t\t{\n\t\t\t\tc=>\n\t\t\t\tif(!hasNext)c.toString else\n\t\t\t\t{\n\t\t\t\t\tval sb=new lang.StringBuilder()\n\t\t\t\t\tsb.append(c)\n\t\t\t\t\t@tailrec\n\t\t\t\t\tdef processWord():Unit=\n\t\t\t\t\t{\n\t\t\t\t\t\tval c=nextChar()\n\t\t\t\t\t\tif(isDelimiter(c))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ta-=1\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsb.append(c)\n\t\t\t\t\t\t\tif(hasNext){processWord()}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tprocessWord()\n\t\t\t\t\tsb.toString\n\t\t\t\t}\n\t\t\t}.getOrElse(\"\")\n\t\t}\n\t}\n\t@tailrec\n\tdef gcd(a:Long,b:Long):Long={if(a%b==0)b else gcd(b,a%b)}\n\t@tailrec\n\tdef gcd(a:Int,b:Int):Int={if(a%b==0)b else gcd(b,a%b)}\n\tdef lcm(a:Long,b:Long):Long={a/gcd(a,b)*b}\n\tdef factorial(n:Long,m:Long):Long={var f=n;for(i<-1L to n-1L){f*=i;f%=m};f}\n\tdef factorial(n:Int,m:Int):Int={var f=n;for(i<-1 to n-1){f*=i;f%=m};f}\n}"
		],
		"description": "scalaきょーぷろ!"
	}
}