{
	"scalatemplate":
	{
		"prefix":"templatescala",
		"body":[
		"import java.io.BufferedOutputStream",
		"import java.io.EOFException",
		"import java.io.InputStream",
		"import java.io.PrintStream",
		"import java.lang",
		"import java.lang.Math.negateExact",
		"import java.lang.Math.toIntExact",
		"import java.util",
		"import scala.annotation.tailrec",
		"import scala.collection.mutable",
		"",
		"object Main",
		"{",
		"\tdef main(args:Array[String]):Unit=",
		"\t{",
		"\t\tval allin=io.Source.stdin.getLines().mkString(\"\\n\").split(\" \")",
		"\t\tsolve(/*args*/)",
		"\t\tSystem.out.flush()",
		"\t}",
		"\tdef solve(/*args*/)=",
		"\t{",
		"\t\t$0",
		"\t}",
		"\t@tailrec",
		"\tdef gcd(a:Long,b:Long):Long={if(a%b==0)b else gcd(b,a%b)}",
		"\t@tailrec",
		"\tdef gcd(a:Int,b:Int):Int={if(a%b==0)b else gcd(b,a%b)}",
		"\tdef lcm(a:Long,b:Long):Long={a/gcd(a,b)*b}",
		"\tdef factorial(n:Long,m:Long):Long={var f=n;for(i<-1L to n-1L){f*=i;f%=m};f}",
		"\tdef factorial(n:Int,m:Int):Int={var f=n;for(i<-1 to n-1){f*=i;f%=m};f}",
		"\tdef dYes():Unit={println(\"Yes\");sys.exit(0)}",
		"\tdef dNo():Unit={println(\"No\");sys.exit(0)}",
		"\tdef drop(x:Any):Unit={println(x);sys.exit(0)}",
		"\tdef cout(x:Any*):Unit=for(r<-x)println(r)",
		"\t//union-find",
		"\tclass uni(val n:Int)",
		"\t{",
		"\t\tprivate var par=new Array[Int](n);for(i<-0 until n)par(i)=i",
		"\t\tprivate var siz=Array.fill(n)(1)",
		"\t\tdef merge(x:Int,y:Int):Unit=",
		"\t\t{",
		"\t\t\tvar rx=root(x)",
		"\t\t\tvar ry=root(y)",
		"\t\t\tif(rx==ry)return",
		"\t\t\tif(siz(rx)<siz(ry))",
		"\t\t\t{",
		"\t\t\t\tval tmp=rx",
		"\t\t\t\trx=ry",
		"\t\t\t\try=tmp",
		"\t\t\t}",
		"\t\t\tsiz(rx)+=siz(ry)",
		"\t\t\tpar(ry)=rx",
		"\t\t}",
		"\t\tdef root(x:Int):Int=",
		"\t\t\tif(par(x)==x)x else",
		"\t\t\t{",
		"\t\t\t\tpar(x)=root(par(x))",
		"\t\t\t\tpar(x)",
		"\t\t\t}",
		"\t\tdef same(x:Int,y:Int):Boolean=root(x)==root(y)",
		"\t\tdef size(x:Int):Int=siz(root(x))",
		"\t}",
		"\t//Fenwicktree(1-indexed)",
		"\tclass FwLong(val n:Long=0L)",
		"\t{",
		"\t\tprivate var fw=new Array[Long]((n+1).toInt)",
		"\t\tdef sum(i:Long):Long=",
		"\t\t{",
		"\t\t\tvar j=i",
		"\t\t\tvar ans=0L",
		"\t\t\twhile(j>0)",
		"\t\t\t{",
		"\t\t\t\tans+=fw(j.toInt)",
		"\t\t\t\tj-=j&(-j)",
		"\t\t\t}",
		"\t\t\tans",
		"\t\t}",
		"\t\tdef add(i:Long,a:Long):Unit=",
		"\t\t{",
		"\t\t\tvar j=i",
		"\t\t\tif(j==0)return",
		"\t\t\telse while(j<=n)",
		"\t\t\t{",
		"\t\t\t\tfw(j.toInt)+=a",
		"\t\t\t\tj+=j&(-j)",
		"\t\t\t}",
		"\t\t}",
		"\t\tdef l_b(k:Long):Long=",
		"\t\t{",
		"\t\t\tvar l=k",
		"\t\t\tif(l<=0)return 0L",
		"\t\t\tvar ret=0L",
		"\t\t\tvar i=1L",
		"\t\t\twhile((i<<1)<=n)i<<=1",
		"\t\t\twhile(i!=0)",
		"\t\t\t{",
		"\t\t\t\tif(ret+i<=n&&fw((ret+i).toInt)<l)",
		"\t\t\t\t{",
		"\t\t\t\t\tl-=fw((ret+i).toInt)",
		"\t\t\t\t\tret+=i",
		"\t\t\t\t}",
		"\t\t\t\ti>>=1",
		"\t\t\t}",
		"\t\t\tret+1",
		"\t\t}",
		"\t}",
		"}"
		],
		"description": "scalaきょーぷろ!"
	}
}